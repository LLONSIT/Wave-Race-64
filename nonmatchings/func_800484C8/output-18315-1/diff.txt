--- before
+++ after
@@ -979,7 +979,9 @@
   f32 cross2_z;
   f32 cross3_x;
   f32 cross3_y;
+  float new_var;
   f32 cross3_z;
+  float new_var2;
   f32 up_x;
   f32 up_y;
   f32 up_z;
@@ -987,26 +989,20 @@
   temp_f14 = arg2 - arg8;
   temp_f16 = arg3 - arg6;
   temp_f18 = arg4 - arg9;
-  temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
+  sp58 = temp_f18;
+  new_var2 = (temp_f14 * temp_f14) + (temp_f16 * temp_f16);
+  temp_len = new_var2 + (temp_f18 * temp_f18);
   if (temp_len <= 0.0f)
   {
     return;
   }
   sp60 = temp_f14;
   sp5C = temp_f16;
-  sp58 = temp_f18;
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
   temp_f22 = temp_f16;
   temp_f20 = temp_f14;
-  temp_f24 = temp_f18;
-  temp_f12 = temp_f22 * temp_f2;
-  sp48 = temp_f20 * temp_f2;
-  sp50 = temp_f24 * temp_f2;
-  arg1->yx = temp_f12;
-  arg1->xx = sp48;
-  arg1->zx = sp50;
-  sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
+ temp_f24 = temp_f18; temp_f12 = temp_f22 * temp_f2; sp48 = temp_f20 * temp_f2; sp50 = temp_f24 * temp_f2; arg1->yx = temp_f12; arg1->xx = sp48; arg1->zx = sp50; sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
@@ -1014,7 +1010,7 @@
   cross2_y = (arg9 * sp48) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
-  if (temp_len <= 0.0f)
+  if (temp_len <= (temp_f20 * 0.0f))
   {
     return;
   }
@@ -1033,7 +1029,6 @@
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (temp_f16 * cross2_x);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
-  if (temp_len <= 0.0f)
   {
     return;
   }
@@ -1044,8 +1039,9 @@
   temp_f16 = cross3_z * temp_f2;
   arg1->xz = temp_f12;
   arg1->yz = temp_f14;
+  new_var = (-arg2) * temp_f14;
   arg1->zz = temp_f16;
-  final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
+  final_trans = (new_var + (arg3 * temp_f12)) - (arg4 * temp_f16);
   arg1->wx = 0.0f;
   arg1->wy = 0.0f;
   arg1->wz = 0.0f;
