--- before
+++ after
@@ -963,7 +963,9 @@
   f32 temp_f14;
   f32 temp_f16;
   f32 temp_f18;
+  MF *new_var2;
   f32 temp_f12;
+  f32 cross3_y;
   f32 temp_f2;
   f32 temp_f22;
   f32 temp_f20;
@@ -976,7 +978,6 @@
   f32 cross2_y;
   f32 cross2_z;
   f32 cross3_x;
-  f32 cross3_y;
   f32 cross3_z;
   f32 up_x;
   f32 up_y;
@@ -988,7 +989,7 @@
   temp_f18 = arg4 - arg9;
   temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
   new_var = temp_f16;
-  if (temp_len <= 0.0f)
+  if ((temp_len <= 0.0f) & 0xFFFFFFFF)
   {
     return;
   }
@@ -1002,31 +1003,15 @@
   temp_f24 = temp_f18;
   temp_f12 = temp_f22 * temp_f2;
   sp48 = temp_f20 * temp_f2;
-  sp50 = temp_f24 * temp_f2;
-  arg1->yx = temp_f12;
-  arg1->xx = sp48;
-  cross2_z = arg3;
-  arg1->zx = sp50;
-  sp3C = (((-arg2) * sp48) + (cross2_z * temp_f12)) - (arg4 * sp50);
-  cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
-  cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
-  cross2_x = (argA * sp50) - (arg9 * temp_f12);
-  cross2_y = (arg9 * sp48) - (argA * sp50);
-  cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
-  temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
-  if (temp_len <= 0.0f)
-  {
-    return;
-  }
-  cross2_x = new_var;
+ do { sp50 = temp_f24 * temp_f2; arg1->yx = temp_f12; arg1->xx = sp48; cross2_z = arg3; arg1->zx = sp50; sp3C = (((-arg2) * sp48) + (cross2_z * temp_f12)) - (arg4 * sp50); cross1_x = (argA * temp_f24) - (arg7 * temp_f22); cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20); cross2_x = (argA * sp50) - (arg9 * temp_f12); cross2_y = (arg9 * sp48) - (argA * sp50); cross2_z = (arg8 * temp_f12) - (arg6 * sp48); temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z); if (temp_len <= 0.0f) { return; } new_var2 = arg1; cross2_x = new_var; } while (0);
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
   temp_f12 = cross1_y * temp_f2;
   sp3C = cross1_x * temp_f2;
   sp44 = cross1_z * temp_f2;
-  arg1->xy = temp_f12;
-  arg1->yy = sp3C;
-  arg1->zy = sp44;
+  new_var2->xy = temp_f12;
+  new_var2->yy = sp3C;
+  new_var2->zy = sp44;
   temp_f18 = cross1_z;
   cross3_x = (new_var * temp_f18) - (temp_f18 * cross1_y);
   cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
@@ -1046,18 +1031,18 @@
   temp_f12 = cross3_y * temp_f2;
   temp_f14 = cross3_x * temp_f2;
   temp_f16 = cross3_z * temp_f2;
-  arg1->xz = temp_f12;
-  arg1->yz = temp_f14;
-  arg1->zz = temp_f16;
+  new_var2->xz = temp_f12;
+  new_var2->yz = temp_f14;
+  new_var2->zz = temp_f16;
   final_trans = (((-arg2) * temp_f14) + (cross2_z * temp_f12)) - (arg4 * temp_f16);
-  arg1->wx = 0.0f;
+  new_var2->wx = 0.0f;
   sp44++;
   sp44--;
-  arg1->wy = 0.0f;
-  arg1->wz = 0.0f;
-  arg1->ww = 1.0f;
-  arg1->xw = final_trans;
-  func_80047EE0(arg1, arg0);
+  new_var2->wy = 0.0f;
+  new_var2->wz = 0.0f;
+  new_var2->ww = 1.0f;
+  new_var2->xw = final_trans;
+  func_80047EE0(new_var2, arg0);
 }
 
 #pragma GLOBAL_ASM("asm/nonmatchings/game/code_23E0/func_80048854.s")
