--- before
+++ after
@@ -1007,12 +1007,13 @@
   arg1->xx = sp48;
   arg1->zx = sp50;
   sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
+  temp_f20 = cross1_y;
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
   cross2_y = (arg9 * sp48) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
-  temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
+  temp_len = ((cross1_x * cross1_x) + (temp_f20 * temp_f20)) + (cross1_z * cross1_z);
   if (temp_len <= 0.0f)
   {
     return;
@@ -1020,16 +1021,16 @@
   cross2_x = new_var;
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
-  temp_f12 = cross1_y * temp_f2;
+  temp_f12 = temp_f20 * temp_f2;
   sp3C = cross1_x * temp_f2;
   sp44 = cross1_z * temp_f2;
   arg1->xy = temp_f12;
   arg1->yy = sp3C;
   arg1->zy = sp44;
   temp_f18 = cross1_z;
-  cross3_x = (new_var * temp_f18) - (temp_f18 * cross1_y);
+  cross3_x = (new_var * temp_f18) - (temp_f18 * temp_f20);
   cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
-  cross3_z = (temp_f14 * cross1_y) - (new_var * cross1_x);
+  cross3_z = (temp_f14 * temp_f20) - (new_var * cross1_x);
   up_x = (new_var * cross2_z) - (temp_f18 * cross2_y);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
@@ -1048,9 +1049,7 @@
   arg1->yz = temp_f14;
   arg1->zz = temp_f16;
   final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
-  arg1->wx = 0.0f;
-  arg1->wy = 0.0f;
-  arg1->wz = 0.0f;
+  arg1->wz = (arg1->wy = (arg1->wx = 0.0f));
   arg1->ww = 1.0f;
   arg1->xw = final_trans;
   func_80047EE0(arg1, arg0);
