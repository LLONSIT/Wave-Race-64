--- before
+++ after
@@ -960,6 +960,7 @@
   f32 sp4C;
   f32 sp48;
   f32 sp44;
+  MF *new_var;
   f32 sp3C;
   f32 sp30;
   f32 temp_f14;
@@ -981,17 +982,19 @@
   f32 cross3_y;
   f32 cross3_z;
   f32 up_x;
+  f32 new_var2;
   f32 up_y;
   f32 up_z;
   f32 final_trans;
   temp_f14 = arg2 - arg8;
   temp_f16 = arg3 - arg6;
-  temp_f18 = arg4 - arg9;
+  temp_f18 = (arg4 - arg9) * 1.0f;
   temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
   if (temp_len <= 0.0f)
   {
     return;
   }
+  new_var2 = arg8;
   sp60 = temp_f14;
   sp5C = temp_f16;
   sp58 = temp_f18;
@@ -1009,10 +1012,10 @@
   sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
-  cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
+  cross1_z = (new_var2 * temp_f22) - (arg6 * temp_f20);
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
   cross2_y = (arg9 * sp48) - (argA * sp50);
-  cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
+  cross2_z = (new_var2 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
   if (temp_len <= 0.0f)
   {
@@ -1031,8 +1034,9 @@
   cross3_z = (temp_f14 * cross1_y) - (temp_f16 * cross1_x);
   up_x = (temp_f16 * cross2_z) - (temp_f18 * cross2_y);
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
+  up_y = up_y * up_y;
   up_z = (temp_f14 * cross2_y) - (temp_f16 * cross2_x);
-  temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
+  temp_len = ((up_x * up_x) + up_y) + (up_z * up_z);
   if (temp_len <= 0.0f)
   {
     return;
@@ -1048,10 +1052,11 @@
   final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
   arg1->wx = 0.0f;
   arg1->wy = 0.0f;
+  new_var = arg1;
   arg1->wz = 0.0f;
   arg1->ww = 1.0f;
   arg1->xw = final_trans;
-  func_80047EE0(arg1, arg0);
+  func_80047EE0(new_var, arg0);
 }
 
 #pragma GLOBAL_ASM("asm/nonmatchings/game/code_23E0/func_80048854.s")
