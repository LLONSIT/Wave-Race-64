--- before
+++ after
@@ -976,6 +976,7 @@
   f32 cross2_y;
   f32 cross2_z;
   f32 cross3_x;
+  f32 new_var2;
   f32 cross3_y;
   f32 cross3_z;
   f32 up_x;
@@ -984,8 +985,9 @@
   f32 new_var;
   f32 final_trans;
   temp_f14 = arg2 - arg8;
+  new_var2 = arg9;
   temp_f16 = arg3 - arg6;
-  temp_f18 = arg4 - arg9;
+  temp_f18 = arg4 - new_var2;
   temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
   new_var = temp_f16;
   if (temp_len <= 0.0f)
@@ -1011,8 +1013,8 @@
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   up_y = new_var * cross1_x;
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
-  cross2_x = (argA * sp50) - (arg9 * temp_f12);
-  cross2_y = (arg9 * sp48) - (argA * sp50);
+  cross2_x = (argA * sp50) - (new_var2 * temp_f12);
+  cross2_y = (new_var2 * sp48) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
   if (temp_len <= 0.0f)
@@ -1034,17 +1036,19 @@
   cross3_z = (temp_f14 * cross1_y) - up_y;
   up_x = (new_var * cross2_z) - (temp_f18 * cross2_y);
   sp48 = argA * temp_f24;
+  temp_f20 = temp_f18;
   cross1_y = (arg7 * temp_f20) - sp48;
-  up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
+  up_y = (temp_f20 * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
+  temp_f14 = cross3_y;
   if (temp_len <= 0.0f)
   {
     return;
   }
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
-  temp_f12 = cross3_y * temp_f2;
+  temp_f12 = temp_f14 * temp_f2;
   temp_f14 = cross3_x * temp_f2;
   temp_f16 = cross3_z * temp_f2;
   arg1->xz = temp_f12;
