--- before
+++ after
@@ -955,6 +955,7 @@
   f32 sp60;
   f32 sp5C;
   f32 sp58;
+  MF *new_var;
   f32 sp54;
   f32 sp50;
   f32 sp4C;
@@ -972,10 +973,10 @@
   f32 temp_f24;
   f32 temp_len;
   f32 cross1_x;
+  f32 cross2_y;
   f32 cross1_y;
   f32 cross1_z;
   f32 cross2_x;
-  f32 cross2_y;
   f32 cross2_z;
   f32 cross3_x;
   f32 cross3_y;
@@ -988,7 +989,7 @@
   temp_f16 = arg3 - arg6;
   temp_f18 = arg4 - arg9;
   temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
-  if (temp_len <= 0.0f)
+  if (temp_len < (0.0f + 1))
   {
     return;
   }
@@ -1001,6 +1002,7 @@
   temp_f20 = temp_f14;
   temp_f24 = temp_f18;
   temp_f12 = temp_f22 * temp_f2;
+  temp_f24 = temp_f16;
   sp48 = temp_f20 * temp_f2;
   sp50 = temp_f24 * temp_f2;
   arg1->yx = temp_f12;
@@ -1009,11 +1011,13 @@
   sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
+  temp_f18 = sp48;
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
-  cross2_y = (arg9 * sp48) - (argA * sp50);
-  cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
+  cross2_y = (arg9 * temp_f18) - (argA * sp50);
+  cross2_z = (arg8 * temp_f12) - (arg6 * temp_f18);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
+  new_var = arg1;
   if (temp_len <= 0.0f)
   {
     return;
@@ -1022,13 +1026,13 @@
   temp_f2 = 1.0f / temp_len;
   temp_f12 = cross1_y * temp_f2;
   sp3C = cross1_x * temp_f2;
-  sp44 = cross1_z * temp_f2;
-  arg1->xy = temp_f12;
+  ;
+  new_var->xy = temp_f12;
   arg1->yy = sp3C;
-  arg1->zy = sp44;
-  cross3_x = (temp_f16 * cross1_z) - (temp_f18 * cross1_y);
+  arg1->zy = cross1_z * temp_f2;
+  cross3_x = (temp_f24 * cross1_z) - (temp_f18 * cross1_y);
   cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
-  cross3_z = (temp_f14 * cross1_y) - (temp_f16 * cross1_x);
+  cross3_z = (temp_f14 * cross1_y) - (temp_f24 * cross1_x);
   up_x = (temp_f16 * cross2_z) - (temp_f18 * cross2_y);
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (temp_f16 * cross2_x);
@@ -1047,8 +1051,7 @@
   arg1->zz = temp_f16;
   final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
   arg1->wx = 0.0f;
-  arg1->wy = 0.0f;
-  arg1->wz = 0.0f;
+  arg1->wz = (arg1->wy = 0.0f);
   arg1->ww = 1.0f;
   arg1->xw = final_trans;
   func_80047EE0(arg1, arg0);
