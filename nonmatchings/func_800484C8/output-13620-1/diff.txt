--- before
+++ after
@@ -963,6 +963,7 @@
   f32 temp_f14;
   f32 temp_f16;
   f32 temp_f18;
+  float new_var3;
   f32 temp_f12;
   f32 temp_f2;
   f32 temp_f22;
@@ -980,6 +981,7 @@
   f32 cross3_z;
   f32 up_x;
   f32 up_y;
+  float new_var2;
   f32 up_z;
   f32 new_var;
   f32 final_trans;
@@ -997,22 +999,25 @@
   sp58 = temp_f18;
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
+  new_var3 = -arg2;
   temp_f22 = new_var;
   temp_f20 = temp_f14;
   temp_f24 = temp_f18;
+  new_var2 = temp_f24 * temp_f2;
   temp_f12 = temp_f22 * temp_f2;
   sp48 = temp_f20 * temp_f2;
-  sp50 = temp_f24 * temp_f2;
+  sp50 = new_var2;
   arg1->yx = temp_f12;
   arg1->xx = sp48;
   cross2_z = arg3;
   arg1->zx = sp50;
-  sp3C = (((-arg2) * sp48) + (cross2_z * temp_f12)) - (arg4 * sp50);
+  sp44 = sp48;
+  sp3C = ((new_var3 * sp44) + (cross2_z * temp_f12)) - (arg4 * sp50);
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   up_y = new_var * cross1_x;
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
-  cross2_y = (arg9 * sp48) - (argA * sp50);
+  cross2_y = (arg9 * sp44) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
   if (temp_len <= 0.0f)
@@ -1036,7 +1041,8 @@
   sp48 = argA * temp_f24;
   cross1_y = (arg7 * temp_f20) - sp48;
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
-  up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x);
+  up_z = cross2_x;
+  up_z = (temp_f14 * cross2_y) - (cross2_x * up_z);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
   if (temp_len <= 0.0f)
   {
@@ -1050,7 +1056,7 @@
   arg1->xz = temp_f12;
   arg1->yz = temp_f14;
   arg1->zz = temp_f16;
-  final_trans = (((-arg2) * temp_f14) + (cross2_z * temp_f12)) - (arg4 * temp_f16);
+  final_trans = ((new_var3 * temp_f14) + (cross2_z * temp_f12)) - (arg4 * temp_f16);
   arg1->wx = 0.0f;
   sp44++;
   sp44--;
