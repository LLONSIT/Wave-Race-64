--- before
+++ after
@@ -953,6 +953,7 @@
 void func_800484C8(MF *arg0, MF *arg1, f32 arg2, f32 arg3, f32 arg4, f32 arg5, f32 arg6, f32 arg7, f32 arg8, f32 arg9, f32 argA)
 {
   f32 sp60;
+  f32 new_var2;
   f32 sp5C;
   f32 sp58;
   f32 sp54;
@@ -970,6 +971,7 @@
   f32 temp_f20;
   f32 temp_f22;
   f32 temp_f24;
+  f32 new_var;
   f32 temp_len;
   f32 cross1_x;
   f32 cross1_y;
@@ -988,7 +990,7 @@
   temp_f16 = arg3 - arg6;
   temp_f18 = arg4 - arg9;
   temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
-  if (temp_len <= 0.0f)
+  if ((long) (temp_len <= 0.0f))
   {
     return;
   }
@@ -1016,7 +1018,7 @@
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
   if (temp_len <= 0.0f)
   {
-    return;
+ do { return; } while (0);
   }
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
@@ -1031,8 +1033,11 @@
   cross3_z = (temp_f14 * cross1_y) - (temp_f16 * cross1_x);
   up_x = (temp_f16 * cross2_z) - (temp_f18 * cross2_y);
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
+  new_var2 = up_y;
   up_z = (temp_f14 * cross2_y) - (temp_f16 * cross2_x);
-  temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
+  temp_len = ((up_x * up_x) + (up_y * new_var2)) + (up_z * up_z);
+  if (1)
+  {
   if (temp_len <= 0.0f)
   {
     return;
@@ -1043,13 +1048,15 @@
   temp_f14 = cross3_x * temp_f2;
   temp_f16 = cross3_z * temp_f2;
   arg1->xz = temp_f12;
-  arg1->yz = temp_f14;
+    new_var = temp_f14;
+    arg1->yz = new_var;
   arg1->zz = temp_f16;
   final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
   arg1->wx = 0.0f;
   arg1->wy = 0.0f;
   arg1->wz = 0.0f;
   arg1->ww = 1.0f;
+  }
   arg1->xw = final_trans;
   func_80047EE0(arg1, arg0);
 }
