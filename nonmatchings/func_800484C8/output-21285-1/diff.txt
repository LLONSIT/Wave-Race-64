--- before
+++ after
@@ -981,6 +981,7 @@
   f32 cross3_y;
   f32 cross3_z;
   f32 up_x;
+  f32 new_var;
   f32 up_y;
   f32 up_z;
   f32 final_trans;
@@ -1004,14 +1005,15 @@
   sp48 = temp_f20 * temp_f2;
   sp50 = temp_f24 * temp_f2;
   arg1->yx = temp_f12;
+  new_var = argA;
   arg1->xx = sp48;
   arg1->zx = sp50;
-  sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
+  sp3C = (((-arg2) * sp48) + (temp_f12 * arg3)) - (arg4 * sp50);
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
-  cross2_y = (arg9 * sp48) - (argA * sp50);
+  cross2_y = (arg9 * sp48) - (new_var * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
   if (temp_len <= 0.0f)
@@ -1033,7 +1035,7 @@
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (temp_f16 * cross2_x);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
-  if (temp_len <= 0.0f)
+  if (temp_len < (0.0f + 1))
   {
     return;
   }
