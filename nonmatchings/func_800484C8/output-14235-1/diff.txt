--- before
+++ after
@@ -970,6 +970,7 @@
   f32 temp_f24;
   f32 temp_len;
   f32 cross1_x;
+  f32 new_var2;
   f32 cross1_y;
   f32 cross1_z;
   f32 cross2_x;
@@ -1001,6 +1002,7 @@
   temp_f20 = temp_f14;
   temp_f24 = temp_f18;
   temp_f12 = temp_f22 * temp_f2;
+  new_var2 = new_var;
   sp48 = temp_f20 * temp_f2;
   sp50 = temp_f24 * temp_f2;
   arg1->yx = temp_f12;
@@ -1017,7 +1019,7 @@
   {
     return;
   }
-  cross2_x = new_var;
+  cross2_x = new_var2;
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
   temp_f12 = cross1_y * temp_f2;
@@ -1029,13 +1031,13 @@
   temp_f18 = cross1_z;
   cross3_x = (new_var * temp_f18) - (temp_f18 * cross1_y);
   cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
-  cross3_z = (temp_f14 * cross1_y) - (new_var * cross1_x);
+  cross3_z = (temp_f14 * cross1_y) - (new_var2 * cross1_x);
   up_x = (new_var * cross2_z) - (temp_f18 * cross2_y);
-  cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
+  cross1_y = (cross3_y = arg7 * temp_f20) - (argA * temp_f24);
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
-  if (temp_len <= 0.0f)
+  if ((temp_len - 1) < 0.0f)
   {
     return;
   }
