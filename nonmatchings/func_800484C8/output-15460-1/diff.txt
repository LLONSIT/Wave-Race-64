--- before
+++ after
@@ -956,13 +956,13 @@
   f32 sp54;
   f32 sp50;
   f32 sp4C;
-  f32 sp48;
   f32 sp44;
   f32 sp3C;
   f32 sp30;
   f32 temp_f14;
   f32 temp_f16;
   f32 temp_f18;
+  f32 sp48;
   f32 temp_f12;
   f32 temp_f2;
   f32 temp_f22;
@@ -1013,11 +1013,13 @@
   cross2_y = (arg9 * sp48) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
-  if (temp_len <= 0.0f)
+  temp_f12 = temp_len;
+  if (temp_f12 <= 0.0f)
   {
     return;
   }
   cross2_x = new_var;
+ do { } while (0);
   temp_len = sqrtf(temp_len);
   temp_f2 = 1.0f / temp_len;
   temp_f12 = cross1_y * temp_f2;
@@ -1035,17 +1037,14 @@
   up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
-  if (temp_len <= 0.0f)
+  if (temp_len <= 0.f)
   {
     return;
-  }
-  temp_len = sqrtf(temp_len);
-  temp_f2 = 1.0f / temp_len;
-  temp_f12 = cross3_y * temp_f2;
-  temp_f14 = cross3_x * temp_f2;
+ } temp_len = sqrtf(temp_len); temp_f2 = 1.0f / temp_len; temp_f12 = cross3_y * temp_f2;
   temp_f16 = cross3_z * temp_f2;
   arg1->xz = temp_f12;
   arg1->yz = temp_f14;
+  temp_f14 = cross3_x * temp_f2;
   arg1->zz = temp_f16;
   final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
   arg1->wx = 0.0f;
