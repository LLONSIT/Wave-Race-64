--- before
+++ after
@@ -950,6 +950,7 @@
 void func_800481E0(MF *arg0, u16 *arg1, f32 arg2, f32 arg3, f32 arg4, f32 arg5, f32 arg6, f32 arg7);
 void func_800484C8(MF *arg0, MF *arg1, f32 arg2, f32 arg3, f32 arg4, f32 arg5, f32 arg6, f32 arg7, f32 arg8, f32 arg9, f32 argA)
 {
+  f32 new_var2;
   f32 sp60;
   f32 sp5C;
   f32 sp58;
@@ -968,6 +969,7 @@
   f32 temp_f22;
   f32 temp_f20;
   f32 temp_f24;
+  f32 *new_var3;
   f32 temp_len;
   f32 cross1_x;
   f32 cross1_y;
@@ -999,7 +1001,8 @@
   temp_f2 = 1.0f / temp_len;
   temp_f22 = new_var;
   temp_f20 = temp_f14;
-  temp_f24 = temp_f18;
+  new_var3 = &temp_f18;
+  temp_f24 = *new_var3;
   temp_f12 = temp_f22 * temp_f2;
   sp48 = temp_f20 * temp_f2;
   sp50 = temp_f24 * temp_f2;
@@ -1008,11 +1011,13 @@
   arg1->zx = sp50;
   sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
   cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
-  cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
+  cross1_z = (float) ((arg8 * temp_f22) - (arg6 * temp_f20));
+  sp5C = cross1_z;
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
   cross2_y = (arg9 * sp48) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
-  temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
+  new_var2 = sp5C;
+  temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (new_var2 * new_var2);
   if (temp_len <= 0.0f)
   {
     return;
@@ -1022,17 +1027,17 @@
   temp_f2 = 1.0f / temp_len;
   temp_f12 = cross1_y * temp_f2;
   sp3C = cross1_x * temp_f2;
-  sp44 = cross1_z * temp_f2;
+  sp44 = sp5C * temp_f2;
   arg1->xy = temp_f12;
   arg1->yy = sp3C;
   arg1->zy = sp44;
-  temp_f18 = cross1_z;
-  cross3_x = (new_var * temp_f18) - (temp_f18 * cross1_y);
-  cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
+  temp_f18 = sp5C;
+  cross3_x = (new_var * (*new_var3)) - ((*new_var3) * cross1_y);
+  cross3_y = ((*new_var3) * cross1_x) - (temp_f14 * sp5C);
   cross3_z = (temp_f14 * cross1_y) - (new_var * cross1_x);
-  up_x = (new_var * cross2_z) - (temp_f18 * cross2_y);
+  up_x = (new_var * cross2_z) - ((*new_var3) * cross2_y);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
-  up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
+  up_y = ((*new_var3) * cross2_x) - (temp_f14 * cross2_z);
   up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x);
   temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
   if (temp_len <= 0.0f)
