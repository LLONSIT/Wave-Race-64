--- before
+++ after
@@ -968,12 +968,14 @@
   f32 temp_f12;
   f32 temp_f2;
   f32 temp_f20;
+  f32 new_var3;
   f32 temp_f22;
   f32 temp_f24;
   f32 temp_len;
   f32 cross1_x;
   f32 cross1_y;
   f32 cross1_z;
+  float new_var;
   f32 cross2_x;
   f32 cross2_y;
   f32 cross2_z;
@@ -984,8 +986,10 @@
   f32 up_y;
   f32 up_z;
   f32 final_trans;
+  f32 new_var2;
   temp_f14 = arg2 - arg8;
-  temp_f16 = arg3 - arg6;
+  new_var2 = arg6;
+  temp_f16 = arg3 - new_var2;
   temp_f18 = arg4 - arg9;
   temp_len = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
   if (temp_len <= 0.0f)
@@ -1003,11 +1007,12 @@
   temp_f12 = temp_f22 * temp_f2;
   sp48 = temp_f20 * temp_f2;
   sp50 = temp_f24 * temp_f2;
+  new_var = argA * temp_f24;
   arg1->yx = temp_f12;
   arg1->xx = sp48;
   arg1->zx = sp50;
   sp3C = (((-arg2) * sp48) + (arg3 * temp_f12)) - (arg4 * sp50);
-  cross1_x = (argA * temp_f24) - (arg7 * temp_f22);
+  cross1_x = new_var - (arg7 * temp_f22);
   cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
   cross1_z = (arg8 * temp_f22) - (arg6 * temp_f20);
   cross2_x = (argA * sp50) - (arg9 * temp_f12);
@@ -1030,10 +1035,11 @@
   cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
   cross3_z = (temp_f14 * cross1_y) - (temp_f16 * cross1_x);
   up_x = (temp_f16 * cross2_z) - (temp_f18 * cross2_y);
-  up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
-  up_z = (temp_f14 * cross2_y) - (temp_f16 * cross2_x);
-  temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
-  if (temp_len <= 0.0f)
+  new_var3 = temp_f14;
+  up_y = (temp_f18 * cross2_x) - (new_var3 * cross2_z);
+  up_z = (new_var3 * cross2_y) - (temp_f16 * cross2_x);
+  ;
+  if ((((up_x * up_x) + (up_y * up_y)) + (up_z * up_z)) <= 0.0f)
   {
     return;
   }
