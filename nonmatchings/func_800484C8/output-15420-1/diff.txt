--- before
+++ after
@@ -1013,6 +1013,7 @@
   cross2_y = (arg9 * sp48) - (argA * sp50);
   cross2_z = (arg8 * temp_f12) - (arg6 * sp48);
   temp_len = ((cross1_x * cross1_x) + (cross1_y * cross1_y)) + (cross1_z * cross1_z);
+  arg1->yz = temp_f14;
   if (temp_len <= 0.0f)
   {
     return;
@@ -1028,27 +1029,7 @@
   arg1->zy = sp44;
   temp_f18 = cross1_z;
   cross3_x = (new_var * temp_f18) - (temp_f18 * cross1_y);
-  cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z);
-  cross3_z = (temp_f14 * cross1_y) - (new_var * cross1_x);
-  up_x = (new_var * cross2_z) - (temp_f18 * cross2_y);
-  cross1_y = (arg7 * temp_f20) - (argA * temp_f24);
-  up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z);
-  up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x);
-  temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z);
-  if (temp_len <= 0.0f)
-  {
-    return;
-  }
-  temp_len = sqrtf(temp_len);
-  temp_f2 = 1.0f / temp_len;
-  temp_f12 = cross3_y * temp_f2;
-  temp_f14 = cross3_x * temp_f2;
-  temp_f16 = cross3_z * temp_f2;
-  arg1->xz = temp_f12;
-  arg1->yz = temp_f14;
-  arg1->zz = temp_f16;
-  final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16);
-  arg1->wx = 0.0f;
+ do { cross3_y = (temp_f18 * cross1_x) - (temp_f14 * cross1_z); cross3_z = (temp_f14 * cross1_y) - (new_var * cross1_x); up_x = (new_var * cross2_z) - (temp_f18 * cross2_y); cross1_y = (arg7 * temp_f20) - (argA * temp_f24); up_y = (temp_f18 * cross2_x) - (temp_f14 * cross2_z); up_z = (temp_f14 * cross2_y) - (cross2_x * cross2_x); temp_len = ((up_x * up_x) + (up_y * up_y)) + (up_z * up_z); if (temp_len <= 0.0f) { return; } temp_len = sqrtf(temp_len); temp_f2 = 1.0f / temp_len; temp_f12 = cross3_y * temp_f2; temp_f14 = cross3_x * temp_f2; temp_f16 = cross3_z * temp_f2; arg1->xz = temp_f12; arg1->yz = temp_f14; arg1->zz = temp_f16; final_trans = (((-arg2) * temp_f14) + (arg3 * temp_f12)) - (arg4 * temp_f16); arg1->wx = 0.0f; } while (0);
   arg1->wy = 0.0f;
   arg1->wz = 0.0f;
   arg1->ww = 1.0f;
