--- before
+++ after
@@ -950,6 +950,7 @@
   f32 len1;
   f32 inv_len1;
   f32 x;
+  float new_var;
   f32 y;
   f32 z;
   f32 up_x;
@@ -971,30 +972,7 @@
   f32 dummy;
   temp_f14 = arg2 - arg8;
   temp_f16 = arg3 - arg6;
-  temp_f18 = arg4 - arg9;
-  len1 = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18);
-  if (len1 <= 0.0f)
-  {
-    return;
-  }
-  inv_len1 = 1.0f / sqrtf(len1);
-  x = temp_f14 * inv_len1;
-  y = temp_f16 * inv_len1;
-  z = temp_f18 * inv_len1;
-  up_x = arg5;
-  up_y = arg6;
-  up_z = arg7;
-  s_x = (y * up_z) - (z * up_y);
-  s_y = (z * up_x) - (x * up_z);
-  s_z = (x * up_y) - (y * up_x);
-  len2 = ((s_x * s_x) + (s_y * s_y)) + (s_z * s_z);
-  if (len2 <= 0.0f)
-  {
-    return;
-  }
-  inv_len2 = 1.0f / sqrtf(len2);
-  s_x *= inv_len2;
-  s_y *= inv_len2;
+ temp_f18 = arg4 - arg9; len1 = ((temp_f14 * temp_f14) + (temp_f16 * temp_f16)) + (temp_f18 * temp_f18); if (len1 <= 0.0f) { return; } inv_len1 = 1.0f / sqrtf(len1); x = temp_f14 * inv_len1; y = temp_f16 * inv_len1; z = temp_f18 * inv_len1; up_x = arg5; up_y = arg6; up_z = arg7; s_x = (y * up_z) - (z * up_y); s_y = (z * up_x) - (x * up_z); s_z = (x * up_y) - (y * up_x); len2 = ((s_x * s_x) + (s_y * s_y)) + (s_z * s_z); if (len2 <= 0.0f) { return; } inv_len2 = 1.0f / sqrtf(len2); s_x *= inv_len2; s_y *= inv_len2;
   s_z *= inv_len2;
   u_x = (s_y * z) - (s_z * y);
   u_y = (s_z * x) - (s_x * z);
@@ -1011,7 +989,8 @@
   u_z *= inv_len3;
   tx = -(((x * arg2) + (y * arg3)) + (z * arg4));
   ty = -(((s_x * arg2) + (s_y * arg3)) + (s_z * arg4));
-  tz = -(((u_x * arg2) + (u_y * arg3)) + (u_z * arg4));
+  new_var = (u_x * arg2) + (u_y * arg3);
+  tz = -(new_var + (u_z * arg4));
   dummy = 0.0f;
   dummy++;
   dummy--;
